package com.example.carl.glassfakenotifications;

import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.SoundPool;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.media.AudioManager;
import android.view.ViewGroup;


/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href"https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    List<Card> cardList = new ArrayList<Card>();


    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    private CardScrollAdapter mCardScrollerAdapter;

    private boolean homeSelected = false;

    /** "Hello World!" {@link View} generated by {@link #buildView(String sender, String message)}. */
    private View mView;

    private SoundPool mSoundPool;
    private int mAlertReceived;

    private TimeCard timeCard;

    private GestureDetector mGestureDetector;

    private Window window;
    private boolean voiceCommand;


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        broadcastLog("starting google glass app");
        // Requests a voice menu on this activity. As for any other
        // window feature, be sure to request this before
        // setContentView() is called
        window = getWindow();
        voiceCommand = getIntent().getBooleanExtra("voicecommand", false);
        if(voiceCommand) {
            window.requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);
        }

        mSoundPool = new SoundPool(1, AudioManager.STREAM_MUSIC, 0);
        mAlertReceived = mSoundPool.load(getApplicationContext(), R.raw.sound_notification, 1);

        mGestureDetector = createGestureDetector(this);

        mCardScroller = new CardScrollView(this);
        mCardScrollerAdapter = new CardScrollAdapter() {
            @Override
            public int getCount() {
                return cardList.size();
            }

            @Override
            public Object getItem(int position) {
                return cardList.get(position);
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return cardList.get(position).getView();
            }

            @Override
            public int getPosition(Object item) {
                if (cardList.contains(item)) {
                    return cardList.indexOf(item);
                }
                return AdapterView.INVALID_POSITION;
            }

            @Override
            public int getHomePosition() {
                return cardList.indexOf(timeCard);
            }
        };
        mCardScroller.setAdapter(mCardScrollerAdapter);

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                if(position == mCardScrollerAdapter.getHomePosition()){
                    homeSelected = true;
                } else{
                    homeSelected = false;
                }
                openOptionsMenu();
            }
        });

        mCardScroller.setHorizontalScrollBarEnabled(true);

        timeCard = new TimeCard();
        timeCard.start();
        LocalBroadcastManager.getInstance(this).registerReceiver(mMessageReceiver, new IntentFilter("newMessage"));

        setContentView(mCardScroller);

        buildView("Carl","hello");
        buildView("Carl", "how's it going");
        buildView("Carl", "what's up?");
    }


    private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            // Get extra data included in the Intent

            String message = intent.getStringExtra("message");
            broadcastLog("received message: " + message);
            if (message.startsWith("text")) {
                String[] tags = new String[]{"sender", "message"};
                String[] parsedMessage = extract(message, tags);
                buildView(parsedMessage[0], parsedMessage[1]);

            } else if(message.startsWith("call")){
                String[] tags = new String[]{"caller", "number"};
                String[] parsedMessage = extract(message, tags);
                Intent callIntent = new Intent(getApplicationContext(), PhoneCall.class);
                System.out.println("Caller: " + parsedMessage[0]);
                callIntent.putExtra("caller", parsedMessage[0]);
                callIntent.putExtra("number", parsedMessage[1]);
                callIntent.putExtra("voicecommand", voiceCommand);
                startActivity(callIntent);
            }

        }
    };

    public String[] extract(String message, String tags[]){
        int length = tags.length;
        String[] content = new String[length];
        for (int i = 0; i < length; i++){
            int index1 = message.indexOf("<" + tags[i] + ">");
            if (index1<0) break;
            index1 += (2 + tags[i].length());
            int index2 = message.indexOf("</" + tags[i] + ">");
            if (index2<0) break;
            content[i] = message.substring(index1, index2);
        }
        return content;
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private View buildView(String sender, String message) {
        Card card = new Card(this);
        cardList.add(1, card);
        card.setText(message);
        card.setFootnote(sender);
        mCardScrollerAdapter.notifyDataSetChanged();
        mCardScroller.setSelection(cardList.indexOf(card));
        window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
        playSound(mAlertReceived);
        broadcastLog("displaying new text from: " + sender);
        return card.getView();
    }

    //Custom card, to display the time
    private class TimeCard extends Thread {
        SimpleDateFormat timeFormat = new SimpleDateFormat("h:mm");
        private String currentTime;
        private Card card;

        public TimeCard(){
            card = new Card(getApplicationContext());
            cardList.add(0,card);
            currentTime = timeFormat.format(new Date());
            card.setText(currentTime);
        }

        public void run(){
            while(true){
                String newTime = timeFormat.format(new Date());
                if (!newTime.contentEquals(currentTime)){
                    card.setText(newTime);
                    currentTime = newTime;
                    MainActivity.this.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            mCardScrollerAdapter.notifyDataSetChanged();
                        }
                    });

                }
                try{
                    sleep(500);
                } catch (InterruptedException e){
                    System.out.println("woops, couldn't sleep");
                }
            }
        }

    }

    private GestureDetector createGestureDetector(Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);
        //Create a base listener for generic gestures
        gestureDetector.setBaseListener( new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {
                if (gesture == Gesture.TAP) {
                    // do something on tap
                    return true;
                } else if (gesture == Gesture.TWO_TAP) {
                    // do something on two finger tap
                    return true;
                } else if (gesture == Gesture.SWIPE_RIGHT) {
                    // do something on right (forward) swipe
                    broadcastLog("user swiped forward");
                    return true;
                } else if (gesture == Gesture.SWIPE_LEFT) {
                    // do something on left (backwards) swipe
                    broadcastLog("user swiped back");
                    return true;
                }
                return false;
            }
        });

        return gestureDetector;
    }

    /*
     * Send generic motion events to the gesture detector
     */
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }


    @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            if(homeSelected) {
                getMenuInflater().inflate(R.menu.main, menu);
                broadcastLog("opened options menu with voice");
            } else{
                getMenuInflater().inflate(R.menu.messages, menu);
            }
            return true;
        }
        // Pass through to super to setup touch menu.
        return super.onCreatePanelMenu(featureId, menu);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if(homeSelected) {
            getMenuInflater().inflate(R.menu.main, menu);
        } else{
            getMenuInflater().inflate(R.menu.messages, menu);
        }
        return true;
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            switch (item.getItemId()) {
                case R.id.exit:
                    broadcastLog("exiting google glass app");
                    Intent exitIntent = new Intent("exit");
                    getApplicationContext().sendBroadcast(exitIntent);
                    finish();
                    break;

                case R.id.reply:
                    break;
                case R.id.busy:
                    break;
                case R.id.call_you_back:
                    break;
                case R.id.lol:
                    break;

                default:
                    return true;
            }
            return true;
        }

        if (item.getItemId() == R.id.exit){
            Intent exitIntent = new Intent("exit");
            getApplicationContext().sendBroadcast(exitIntent);
            finish();
            return true;

        }
        // Good practice to pass through to super if not handled
        return super.onMenuItemSelected(featureId, item);
    }

    @Override
    public boolean onKeyDown(int keycode, KeyEvent event) {
        if (keycode == KeyEvent.KEYCODE_BACK) {
            // user swiped down, override backing
            return true;
        }

        return super.onKeyDown(keycode, event);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        // Unregister since the activity is about to be closed.
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mMessageReceiver);
        super.onDestroy();
    }

    protected void playSound(int soundId) {
        mSoundPool.play(soundId,
                1 /* leftVolume */,
                1 /* rightVolume */,
                1,
                0 /* loop */,
                1 /* rate */);
    }

    public void broadcastLog(String message){
        Intent logMessage = new Intent("log");
        logMessage.putExtra("message", message);
        getApplicationContext().sendBroadcast(logMessage);
    }



}
